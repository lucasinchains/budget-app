{"version":3,"sources":["components/Error.js","components/Setting.js","components/Form.js","components/Expense.js","components/List.js","Helpers.js","components/BudgetCount.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Setting","handleBudget","handleRemaining","handleSetting","useState","amount","handleAmount","error","handleError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","handleExpense","executeExpense","expenseName","handleExpenseName","expenseAmount","handleAmountExpended","trim","expense","id","shortid","generate","Expense","List","expenses","map","key","checkBudget","budget","remaining","index","BudgetCount","remainingBudget","App","showSetting","handleNewExpense","createExpense","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7f235ed9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Error = ({ message }) => {\r\n  return <p className=\"alert alert-danger error\">{message}</p>;\r\n};\r\n\r\nError.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Error;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Error from \"./Error\";\r\n\r\nconst Setting = ({ handleBudget, handleRemaining, handleSetting }) => {\r\n  const [amount, handleAmount] = useState(0);\r\n\r\n  const [error, handleError] = useState(false);\r\n\r\n  const defineBudget = (e) => {\r\n    handleAmount(parseInt(e.target.value));\r\n  };\r\n\r\n  const initialBudget = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (amount < 1 || isNaN(amount)) {\r\n      handleError(true);\r\n      return;\r\n    }\r\n\r\n    handleError(false);\r\n\r\n    handleBudget(amount);\r\n\r\n    handleRemaining(amount);\r\n\r\n    handleSetting(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Please, insert your budget</h2>\r\n      <form onSubmit={initialBudget}>\r\n        {error ? <Error message=\"Budget must be above zero.\" /> : null}\r\n        <input\r\n          type=\"number\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Which is your budget?\"\r\n          onChange={defineBudget}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"button-primary u-full-width\"\r\n          value=\"Start\"\r\n        />\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nSetting.propTypes = {\r\n  handleBudget: PropTypes.func.isRequired,\r\n  handleRemaining: PropTypes.func.isRequired,\r\n  handleSetting: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Setting;\r\n","import React, { useState, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Error from \"./Error\";\r\nimport shortid from \"shortid\";\r\n\r\nconst Form = ({ handleExpense, executeExpense }) => {\r\n  const [expenseName, handleExpenseName] = useState(\"\");\r\n\r\n  const [expenseAmount, handleAmountExpended] = useState(0);\r\n\r\n  const [error, handleError] = useState(false);\r\n\r\n  const addExpense = (e) => {\r\n    e.preventDefault();\r\n\r\n    // validar, contruir el gasto (objeto), pasar el gasto hacia el componente principal, resetear el form\r\n\r\n    if (\r\n      isNaN(expenseAmount) ||\r\n      expenseName.trim() === \"\" ||\r\n      expenseAmount < 1\r\n    ) {\r\n      handleError(true);\r\n      return;\r\n    }\r\n\r\n    handleError(false);\r\n\r\n    const expense = {\r\n      expenseName,\r\n      expenseAmount,\r\n      id: shortid.generate(),\r\n    };\r\n\r\n    handleExpense(expense);\r\n\r\n    executeExpense(true);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Expense Details</h2>\r\n      <div className=\"campo\">\r\n        <form onSubmit={addExpense}>\r\n          {error ? (\r\n            <Error message=\"Both fields are required. Expense amount must be above zero.\" />\r\n          ) : null}\r\n          <label>Insert expense type</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"u-full-width\"\r\n            placeholder=\"i.e: transport, food, cinema...\"\r\n            value={expenseName}\r\n            onChange={(e) => handleExpenseName(e.target.value)}\r\n          />\r\n          <label>Insert amount</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"u-full-width\"\r\n            placeholder=\"amount expended\"\r\n            value={expenseAmount}\r\n            onChange={(e) => handleAmountExpended(parseInt(e.target.value))}\r\n          />\r\n          <input\r\n            type=\"submit\"\r\n            className=\"button-primary u-full-width\"\r\n            value=\"Add expense\"\r\n          />\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  handleExpense: PropTypes.func.isRequired,\r\n  executeExpense: PropTypes.func.isRequired,\r\n};\r\nexport default Form;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Expense = ({ expense }) => (\r\n  <li className=\"gastos\">\r\n    <p>\r\n      {expense.expenseName}\r\n\r\n      <span>$ {expense.expenseAmount}</span>\r\n    </p>\r\n  </li>\r\n);\r\n\r\nExpense.propTypes = {\r\n  expense: PropTypes.object.isRequired,\r\n};\r\nexport default Expense;\r\n","import React from \"react\";\r\nimport Expense from \"./Expense\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst List = ({ expenses }) => (\r\n  <div className=\"gastos-realizados\">\r\n    <h2>Expenses List</h2>\r\n    {expenses.map((expense) => (\r\n      <Expense key={expense.id} expense={expense} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nList.propTypes = {\r\n  expenses: PropTypes.array.isRequired,\r\n};\r\nexport default List;\r\n","export const checkBudget = (budget, remaining) => {\r\n  let badge;\r\n  let index = remaining / budget;\r\n  if (index > 0.75) {\r\n    badge = \"alert alert-success\";\r\n  } else if (index < 0.75 && index > 0.25) {\r\n    badge = \"alert alert-warning\";\r\n  } else {\r\n    badge = \"alert alert-danger\";\r\n  }\r\n\r\n  return badge;\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport { checkBudget } from \"../Helpers\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst BudgetCount = ({ budget, remainingBudget }) => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"alert alert-primary\">Budget: $ {budget}</div>\r\n      <div className={checkBudget(budget, remainingBudget)}>\r\n        Remaining: $ {remainingBudget}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nBudgetCount.propTypes = {\r\n  budget: PropTypes.number.isRequired,\r\n  remainingBudget: PropTypes.number.isRequired,\r\n};\r\nexport default BudgetCount;\r\n","import React, { useState, useEffect } from \"react\";\nimport Setting from \"./components/Setting\";\nimport Form from \"./components/Form\";\nimport List from \"./components/List\";\nimport BudgetCount from \"./components/BudgetCount\";\n\nfunction App() {\n  const [budget, handleBudget] = useState(0);\n\n  const [remainingBudget, handleRemaining] = useState(0);\n\n  const [showSetting, handleSetting] = useState(true);\n\n  const [expenses, handleNewExpense] = useState([]);\n\n  const [expense, handleExpense] = useState({});\n\n  const [createExpense, executeExpense] = useState(false);\n\n  useEffect(() => {\n    if (createExpense) {\n      handleNewExpense([...expenses, expense]);\n      executeExpense(false);\n\n      const remaining = remainingBudget - expense.expenseAmount;\n      handleRemaining(remaining);\n    }\n  }, [expense, createExpense, expenses, remainingBudget]);\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Weekly expenses</h1>\n        <div className=\"contenido-principal contenido\">\n          {showSetting ? (\n            <Setting\n              handleBudget={handleBudget}\n              handleRemaining={handleRemaining}\n              handleSetting={handleSetting}\n            />\n          ) : (\n            <div className=\"row\">\n              <div className=\"one-half column\">\n                <Form\n                  handleExpense={handleExpense}\n                  executeExpense={executeExpense}\n                />\n              </div>\n              <div className=\"one-half column\">\n                <List expenses={expenses} />\n\n                <BudgetCount\n                  budget={budget}\n                  remainingBudget={remainingBudget}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}